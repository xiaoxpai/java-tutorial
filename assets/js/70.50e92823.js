(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{387:function(v,_,t){"use strict";t.r(_);var r=t(6),a=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"消息队列基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息队列基本原理"}},[v._v("#")]),v._v(" 消息队列基本原理")]),v._v(" "),_("blockquote",[_("p",[v._v("消息队列（Message Queue，简称 MQ）技术是"),_("strong",[v._v("应用间交换信息")]),v._v("的一种技术。")]),v._v(" "),_("p",[v._v("消息队列主要解决异步处理、应用间耦合，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。")]),v._v(" "),_("p",[v._v("目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ，而部分数据库如 Redis、MySQL 以及 phxsql 也可实现消息队列的功能。")]),v._v(" "),_("p",[v._v("注意："),_("em",[v._v("为了简便，下文中除了文章标题，一律使用 MQ 简称")]),v._v("。")])]),v._v(" "),_("h2",{attrs:{id:"mq-的简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的简介"}},[v._v("#")]),v._v(" MQ 的简介")]),v._v(" "),_("h3",{attrs:{id:"什么是-mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mq"}},[v._v("#")]),v._v(" 什么是 MQ")]),v._v(" "),_("p",[v._v("消息队列（Message Queue，简称 MQ）技术是应用间交换信息的一种技术。")]),v._v(" "),_("p",[v._v("消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。")]),v._v(" "),_("p",[v._v("MQ 是消费-生产者模型的一个典型的代表，一端往消息队列中不断写入消息，而另一端则可以读取队列中的消息。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。")]),v._v(" "),_("p",[v._v("MQ 的数据可驻留在内存或磁盘上，直到它们被应用程序读取。通过 MQ，应用程序可独立地执行，它们不需要知道彼此的位置，不需要等待接收程序接收此消息。在分布式计算环境中，为了集成分布式应用，开发者需要对异构网络环境下的分布式应用提供有效的通信手段。为了管理需要共享的信息，对应用提供公共的信息交换机制是重要的。")]),v._v(" "),_("p",[v._v("目前主流的 MQ 有：Kafka、RabbitMQ、RocketMQ、ActiveMQ。")]),v._v(" "),_("h3",{attrs:{id:"mq-通信模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-通信模型"}},[v._v("#")]),v._v(" MQ 通信模型")]),v._v(" "),_("p",[v._v("MQ 通信模型大致有以下类型：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("点对点")]),v._v(" - 点对点方式是最为传统和常见的通讯方式，它支持一对一、一对多、多对多、多对一等多种配置方式，支持树状、网状等多种拓扑结构。")]),v._v(" "),_("li",[_("strong",[v._v("多点广播")]),v._v(' - MQ 适用于不同类型的应用。其中重要的，也是正在发展中的是"多点广播"应用，即能够将消息发送到多个目标站点 (Destination List)。可以使用一条 MQ 指令将单一消息发送到多个目标站点，并确保为每一站点可靠地提供信息。MQ 不仅提供了多点广播的功能，而且还拥有智能消息分发功能，在将一条消息发送到同一系统上的多个用户时，MQ 将消息的一个复制版本和该系统上接收者的名单发送到目标 MQ 系统。目标 MQ 系统在本地复制这些消息，并将它们发送到名单上的队列，从而尽可能减少网络的传输量。')]),v._v(" "),_("li",[_("strong",[v._v("发布/订阅 (Publish/Subscribe)")]),v._v(" - 发布/订阅模式使消息的分发可以突破目的队列地理位置的限制，使消息按照特定的主题甚至内容进行分发，用户或应用程序可以根据主题或内容接收到所需要的消息。发布/订阅模式使得发送者和接收者之间的耦合关系变得更为松散，发送者不必关心接收者的目的地址，而接收者也不必关心消息的发送地址，而只是根据消息的主题进行消息的收发。")]),v._v(" "),_("li",[_("strong",[v._v("集群 (Cluster)")]),v._v(" - 为了简化点对点通讯模式中的系统配置，MQ 提供 Cluster(集群) 的解决方案。集群类似于一个域 (Domain)，集群内部的队列管理器之间通讯时，不需要两两之间建立消息通道，而是采用集群 (Cluster) 通道与其它成员通讯，从而大大简化了系统配置。此外，集群中的队列管理器之间能够自动进行负载均衡，当某一队列管理器出现故障时，其它队列管理器可以接管它的工作，从而大大提高系统的高可靠性。")])]),v._v(" "),_("h2",{attrs:{id:"mq-的应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的应用"}},[v._v("#")]),v._v(" MQ 的应用")]),v._v(" "),_("h3",{attrs:{id:"异步处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步处理"}},[v._v("#")]),v._v(" 异步处理")]),v._v(" "),_("blockquote",[_("p",[v._v("MQ 可以将系统间的处理流程异步化，减少等待响应的时间，从而提高整体并发吞吐量。")]),v._v(" "),_("p",[v._v("一般，MQ 异步处理应用于非核心流程，例如：短信/邮件通知、数据推送、上报数据到监控中心/日志中心等。")])]),v._v(" "),_("p",[v._v("假设这样一个场景，用户向系统 A 发起请求，系统 A 处理计算只需要 10 ms，然后通知系统 BCD 写库，系统 BCD 写库耗时分别为：100ms、200ms、300ms。最终总耗时为： 10+100ms+200ms+300ms=610ms。此外，加上请求和响应的网络传输时间，从用户角度看，可能要等待将近 1s 才能得到结果。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_3.png",alt:"img"}})]),v._v(" "),_("p",[v._v("如果使用 MQ，系统 A 接到请求后，耗时 10ms 处理计算，然后向系统 BCD 连续发送消息，假设耗时 5ms。那么 这一过程的总耗时为 3ms + 5ms = 8ms，这相比于 610 ms，大大缩短了响应时间。至于系统 BCD 的写库操作，只要自行消费 MQ 后处理即可，用户无需关注。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_4.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"系统解耦"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统解耦"}},[v._v("#")]),v._v(" 系统解耦")]),v._v(" "),_("blockquote",[_("p",[v._v("通过 MQ，可以消除系统间的强耦合。它的好处在于：")]),v._v(" "),_("ul",[_("li",[v._v("消息的消费者系统可以随意增加，无需修改生产者系统的代码。")]),v._v(" "),_("li",[v._v("生产者系统、消费者系统彼此不会影响对方的流程。\n"),_("ul",[_("li",[v._v("如果生产者系统宕机，消费者系统收不到消息，就不会有下一步的动作。")]),v._v(" "),_("li",[v._v("如果消费者系统宕机，生产者系统让然可以正常发送消息，不影响流程。")])])])])]),v._v(" "),_("p",[v._v("不同系统如果要建立通信，传统的做法是：调用接口。")]),v._v(" "),_("p",[v._v("如果需要和新的系统建立通信或删除已建立的通信，都需要修改代码，这种方案显然耦合度很高。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_1.png",alt:"img"}})]),v._v(" "),_("p",[v._v("如果使用 MQ，系统间的通信只需要通过发布/订阅（Pub/Sub）模型即可，彼此没有直接联系，也就不需要相互感知，从而达到 "),_("strong",[v._v("解耦")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_2.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"流量削峰"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#流量削峰"}},[v._v("#")]),v._v(" 流量削峰")]),v._v(" "),_("blockquote",[_("p",[v._v("当 "),_("strong",[v._v("上下游系统")]),v._v(" 处理能力存在差距的时候，利用 MQ 做一个 “"),_("strong",[v._v("漏斗")]),v._v("” 模型，进行 "),_("strong",[v._v("流控")]),v._v("。把 MQ 当成可靠的 "),_("strong",[v._v("消息暂存地")]),v._v("，进行一定程度的 "),_("strong",[v._v("消息堆积")]),v._v("；在下游有能力处理的时候，再发送消息。")]),v._v(" "),_("p",[v._v("MQ 的流量削峰常用于高并发场景（例如：秒杀、团抢等业务场景），它是缓解瞬时暴增流量的核心手段之一。")]),v._v(" "),_("p",[v._v("如果没有 MQ，两个系统之间通过 "),_("strong",[v._v("协商")]),v._v("、"),_("strong",[v._v("滑动窗口")]),v._v("、"),_("strong",[v._v("限流")]),v._v("/"),_("strong",[v._v("降级")]),v._v("/"),_("strong",[v._v("熔断")]),v._v(" 等复杂的方案也能实现 "),_("strong",[v._v("流控")]),v._v("。但 "),_("strong",[v._v("系统复杂性")]),v._v(" 指数级增长，势必在上游或者下游做存储，并且要处理 "),_("strong",[v._v("定时")]),v._v("、"),_("strong",[v._v("拥塞")]),v._v(" 等一系列问题。而且每当有 "),_("strong",[v._v("处理能力有差距")]),v._v(" 的时候，都需要 "),_("strong",[v._v("单独")]),v._v(" 开发一套逻辑来维护这套逻辑。")])]),v._v(" "),_("p",[v._v("假设某个系统读写数据库的稳定性能为每秒处理 1000 条数据。平常情况下，远远达不到这么大的处理量。假设，因为因为做活动，系统的瞬时请求量剧增，达到每秒 10000 个并发请求，数据库根本承受不了，可能直接就把数据库给整崩溃了，这样系统服务就不可用了。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_5.png",alt:"img"}})]),v._v(" "),_("p",[v._v("如果使用 MQ，每秒写入 10000 条请求，但是系统 A 每秒只从 MQ 中消费 1000 条请求，然后写入数据库。这样，就不会超过数据库的承受能力，而是把请求积压在 MQ 中。只要高峰期一过，系统 A 就会很快把积压的消息给处理掉。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/design/theory/mq/mq_6.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"传输缓冲"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输缓冲"}},[v._v("#")]),v._v(" 传输缓冲")]),v._v(" "),_("p",[v._v("（1）MQ 常被用于做海量数据的传输缓冲。")]),v._v(" "),_("p",[v._v("例如，Kafka 常被用于做为各种日志数据、采集数据的数据中转。然后，Kafka 将数据转发给 Logstash、Elasticsearch 中，然后基于 Elasticsearch 来做日志中心，提供检索、聚合、分析日志的能力。开发者可以通过 Kibana 集成 Elasticsearch 数据进行可视化展示，或自行进行定制化开发。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200930164342.png",alt:"img"}})]),v._v(" "),_("p",[v._v("（2）MQ 也可以被用于流式处理。")]),v._v(" "),_("p",[v._v("例如，Kafka 几乎已经是流计算的数据采集端的标准组件。而流计算通过实时数据处理能力，提供了更为快捷的聚合计算能力，被大量应用于链路监控、实时监控、实时数仓、实时大屏、风控、推荐等应用领域。")]),v._v(" "),_("h3",{attrs:{id:"最终一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最终一致性"}},[v._v("#")]),v._v(" 最终一致性")]),v._v(" "),_("p",[_("strong",[v._v("最终一致性")]),v._v(" 不是 "),_("strong",[v._v("消息队列")]),v._v(" 的必备特性，但确实可以依靠 "),_("strong",[v._v("消息队列")]),v._v(" 来做 "),_("strong",[v._v("最终一致性")]),v._v(" 的事情。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("先写消息再操作")]),v._v("，确保操作完成后再修改消息状态。"),_("strong",[v._v("定时任务补偿机制")]),v._v(" 实现消息 "),_("strong",[v._v("可靠发送接收")]),v._v("、业务操作的可靠执行，要注意 "),_("strong",[v._v("消息重复")]),v._v(" 与 "),_("strong",[v._v("幂等设计")]),v._v("。")]),v._v(" "),_("li",[v._v("所有不保证 "),_("code",[v._v("100%")]),v._v(" "),_("strong",[v._v("不丢消息")]),v._v(" 的消息队列，理论上无法实现 "),_("strong",[v._v("最终一致性")]),v._v("。")])]),v._v(" "),_("blockquote",[_("p",[v._v("像 "),_("code",[v._v("Kafka")]),v._v(" 一类的设计，在设计层面上就有 "),_("strong",[v._v("丢消息")]),v._v(" 的可能（比如 "),_("strong",[v._v("定时刷盘")]),v._v("，如果掉电就会丢消息）。哪怕只丢千分之一的消息，业务也必须用其他的手段来保证结果正确。")])]),v._v(" "),_("h3",{attrs:{id:"系统间通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#系统间通信"}},[v._v("#")]),v._v(" 系统间通信")]),v._v(" "),_("p",[v._v("消息队列一般都内置了 "),_("strong",[v._v("高效的通信机制")]),v._v("，因此也可以用于单纯的 "),_("strong",[v._v("消息通讯")]),v._v("，比如实现 "),_("strong",[v._v("点对点消息队列")]),v._v(" 或者 "),_("strong",[v._v("聊天室")]),v._v(" 等。")]),v._v(" "),_("p",[_("strong",[v._v("生产者/消费者")]),v._v(" 模式，只需要关心消息是否 "),_("strong",[v._v("送达队列")]),v._v("，至于谁希望订阅和需要消费，是 "),_("strong",[v._v("下游")]),v._v(" 的事情，无疑极大地减少了开发和联调的工作量。")]),v._v(" "),_("h2",{attrs:{id:"mq-的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的问题"}},[v._v("#")]),v._v(" MQ 的问题")]),v._v(" "),_("p",[v._v("任何技术都会有利有弊，MQ 给整体系统架构带来很多好处，但也会付出一定的代价。")]),v._v(" "),_("p",[v._v("MQ 主要引入了以下问题：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("系统可用性降低")]),v._v("：引入了 MQ 后，通信需要基于 MQ 完成，如果 MQ 宕机，则服务不可用。因此，MQ 要保证是高可用的，详情参考："),_("a",{attrs:{href:"#MQ-%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8"}},[v._v("MQ 的高可用")])]),v._v(" "),_("li",[_("strong",[v._v("系统复杂度提高")]),v._v("：使用 MQ，需要关注一些新的问题：\n"),_("ul",[_("li",[v._v("如何保证消息没有 "),_("strong",[v._v("重复消费")]),v._v("？")]),v._v(" "),_("li",[v._v("如何处理 "),_("strong",[v._v("消息丢失")]),v._v(" 的问题？")]),v._v(" "),_("li",[v._v("如何保证传递 "),_("strong",[v._v("消息的顺序性")]),v._v("？")]),v._v(" "),_("li",[v._v("如何处理大量 "),_("strong",[v._v("消息积压")]),v._v(" 的问题？")])])]),v._v(" "),_("li",[_("strong",[v._v("一致性问题")]),v._v("：假设系统 A 处理完直接返回成功的结果给用户，用户认为请求成功。但如果此时，系统 BCD 中只要有任意一个写库失败，那么数据就不一致了。这种情况如何处理？")])]),v._v(" "),_("p",[v._v("下面，我们针对以上问题来一一分析。")]),v._v(" "),_("h3",{attrs:{id:"重复消费"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重复消费"}},[v._v("#")]),v._v(" 重复消费")]),v._v(" "),_("p",[_("strong",[v._v("如何保证消息不被重复消费")]),v._v(" 和 "),_("strong",[v._v("如何保证消息消费的幂等性")]),v._v(" 是同一个问题。")]),v._v(" "),_("p",[v._v("必须先明确产生重复消费的原因，才能对症下药。")]),v._v(" "),_("h4",{attrs:{id:"重复消费问题原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重复消费问题原因"}},[v._v("#")]),v._v(" 重复消费问题原因")]),v._v(" "),_("p",[v._v("重复消费问题通常不是 MQ 来处理，而是由开发来处理的。")]),v._v(" "),_("p",[v._v("以 Kafka 举例，Kafka 每个 Partition 都是一个有序的、不可变的记录序列，不断追加到结构化的提交日志中。Partition 中为每条记录分配一个连续的 id 号，称为偏移量（Offset），用于唯一标识 Partition 内的记录。")]),v._v(" "),_("p",[v._v("Kafka 的客户端和 Broker 都会保存 Offset。客户端消费消息后，每隔一段时间，就把已消费的 Offset 提交给 Kafka Broker，表示已消费。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210427194009.png",alt:"img"}})]),v._v(" "),_("p",[v._v("在这个过程中，如果客户端应用消费消息后，因为宕机、重启等情况而没有提交已消费的 Offset 。当系统恢复后，会继续消费消息，由于 Offset 未提交，就会出现重复消费的问题。")]),v._v(" "),_("h4",{attrs:{id:"重复消费解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重复消费解决方案"}},[v._v("#")]),v._v(" 重复消费解决方案")]),v._v(" "),_("p",[v._v("应对重复消费问题，需要在业务层面，通过 "),_("strong",[v._v("幂等性设计")]),v._v(" 来解决。")]),v._v(" "),_("p",[v._v("MQ 重复消费不可怕，可怕的是没有应对机制，可以借鉴的思路有：")]),v._v(" "),_("ul",[_("li",[v._v("如果是写关系型数据库，可以先根据主键查询，判断数据是否已存在，存在则更新，不存在则插入；")]),v._v(" "),_("li",[v._v("如果是写 Redis，由于 set 操作天然具有幂等性，所以什么都不用做；")]),v._v(" "),_("li",[v._v("如果是根据消息做较复杂的逻辑处理，可以在消息中加入全局唯一 ID，例如：订单 ID 等。在客户端存储中（Mysql、Redis 等）保存已消费消息的 ID。一旦接受到新消息，先判断消息中的 ID 是否在已消费消息 ID 表中存在，存在则不再处理，不存在则处理。")])]),v._v(" "),_("p",[v._v("在实际开发中，可以参考上面的例子，结合现实场景，设计合理的幂等性方案。")]),v._v(" "),_("h3",{attrs:{id:"消息丢失"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息丢失"}},[v._v("#")]),v._v(" 消息丢失")]),v._v(" "),_("p",[_("strong",[v._v("如何处理消息丢失的问题")]),v._v(" 和 "),_("strong",[v._v("如何保证消息不被重复消费")]),v._v(" 是同一个问题。关注点有：")]),v._v(" "),_("ul",[_("li",[v._v("MQ Server 丢失数据")]),v._v(" "),_("li",[v._v("消费方丢失数据")]),v._v(" "),_("li",[v._v("生产方丢失数据")])]),v._v(" "),_("h4",{attrs:{id:"消费方丢失数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消费方丢失数据"}},[v._v("#")]),v._v(" 消费方丢失数据")]),v._v(" "),_("p",[v._v("唯一可能导致消费方丢失数据的情况是：消费方设置了"),_("strong",[v._v("自动提交 Offset")]),v._v("。一旦设置了自动提交 Offset，接受到消息后就会自动提交 Offset 给 Kafka ，Kafka 就认为消息已被消费。如果此时，消费方尚未来得及处理消息就挂了，那么消息就丢了。")]),v._v(" "),_("p",[v._v("解决方法就是：消费方关闭自动提交 Offset，处理完消息后"),_("strong",[v._v("手动提交 Offset")]),v._v("。但这种情况下可能会出现重复消费的情形，需要自行保证幂等性。")]),v._v(" "),_("h4",{attrs:{id:"kafka-server-丢失数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-server-丢失数据"}},[v._v("#")]),v._v(" Kafka Server 丢失数据")]),v._v(" "),_("p",[v._v("当 Kafka 某个 Broker 宕机，需要重新选举 Partition 的 Leader。若此时其他的 Follower 尚未同步 Leader 的数据，那么新选某个 Follower 为 Leader 后，就丢失了部分数据。")]),v._v(" "),_("p",[v._v("为此，一般要求至少设置 4 个参数：")]),v._v(" "),_("ul",[_("li",[v._v("给 Topic 设置 "),_("code",[v._v("replication.factor")]),v._v(" 参数 - 这个值必须大于 1，要求每个 Partition 必须有至少 2 个副本。")]),v._v(" "),_("li",[v._v("在 Kafka 服务端设置 "),_("code",[v._v("min.insync.replicas")]),v._v(" 参数 - 这个值必须大于 1，这是要求一个 Leader 需要和至少一个 Follower 保持通信，这样才能确保 Leader 挂了还有替补。")]),v._v(" "),_("li",[v._v("在 Producer 端设置 "),_("code",[v._v("acks=all")]),v._v(" - 这意味着：要求每条数据，必须是"),_("strong",[v._v("写入所有 replica 之后，才能认为写入成功了")]),v._v("。")]),v._v(" "),_("li",[v._v("在 Producer 端设置 "),_("code",[v._v("retries=MAX")]),v._v("（很大很大很大的一个值，无限次重试的意思） - 这意味着"),_("strong",[v._v("要求一旦写入失败，就无限重试")]),v._v("，卡在这里了。")])]),v._v(" "),_("h4",{attrs:{id:"生产方丢失数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生产方丢失数据"}},[v._v("#")]),v._v(" 生产方丢失数据")]),v._v(" "),_("p",[v._v("如果按照上述的思路设置了 "),_("code",[v._v("acks=all")]),v._v("，生产方一定不会丢数据。")]),v._v(" "),_("p",[v._v("要求是，你的 Leader 接收到消息，所有的 Follower 都同步到了消息之后，才认为本生产消息成功了。如果未满足这个条件，生产者会自动不断的重试，重试无限次。")]),v._v(" "),_("h3",{attrs:{id:"消息的顺序性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息的顺序性"}},[v._v("#")]),v._v(" 消息的顺序性")]),v._v(" "),_("p",[v._v("要保证 MQ 的顺序性，势必要付出一定的代价，所以实施方案前，要先明确业务场景是不是有必要保证消息的顺序性。只有那些明确对消息处理顺序有要求的业务场景才值得去保证消息顺序性。")]),v._v(" "),_("p",[v._v("方案一")]),v._v(" "),_("p",[v._v("一个 Topic，一个 Partition，一个 Consumer，内部单线程消费，单线程吞吐量太低，一般不会用这个。")]),v._v(" "),_("p",[v._v("方案二")]),v._v(" "),_("ul",[_("li",[v._v("写入数据到 Partition 时指定一个全局唯一的 ID，例如订单 ID。发送方保证相同 ID 的消息有序的发送到同一个 Partition。")]),v._v(" "),_("li",[v._v("基于上一点，消费方从 Kafka Partition 中消费消息时，此刻一定是顺序的。但如果消费方式以并发方式消费消息，顺序就可能会被打乱。为此，还有做到以下几点：\n"),_("ul",[_("li",[v._v("消费方维护 N 个缓存队列，具有相同 ID 的数据都写入同一个队列中；")]),v._v(" "),_("li",[v._v("创建 N 个线程，每个线程只负责从指定的一个队列中取数据。")])])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210427194215.png",alt:"img"}})]),v._v(" "),_("h3",{attrs:{id:"消息积压"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息积压"}},[v._v("#")]),v._v(" 消息积压")]),v._v(" "),_("p",[v._v("假设一个 MQ 消费者可以一秒处理 1000 条消息，三个 MQ 消费者可以一秒处理 3000 条消息，那么一分钟的处理量是 18 万条。如果 MQ 中积压了几百万到上千万的数据，即使消费者恢复了，也需要大概很长的时间才能恢复过来。")]),v._v(" "),_("p",[v._v("对于产线环境来说，漫长的等待是不可接受的，所以面临这种窘境时，只能临时紧急扩容以应对了，具体操作步骤和思路如下：")]),v._v(" "),_("ul",[_("li",[v._v("先修复 Consumer 的问题，确保其恢复消费速度，然后将现有 Consumer 都停掉。")]),v._v(" "),_("li",[v._v("新建一个 Topic，Partition 是原来的 10 倍，临时建立好原先 10 倍的 Queue 数量。")]),v._v(" "),_("li",[v._v("然后写一个临时的分发数据的 Consumer 程序，这个程序部署上去消费积压的数据，"),_("strong",[v._v("消费之后不做耗时的处理")]),v._v("，直接均匀轮询写入临时建立好的 10 倍数量的 Queue。")]),v._v(" "),_("li",[v._v("接着临时征用 10 倍的机器来部署 Consumer ，每一批 Consumer 消费一个临时 Queue 的数据。这种做法相当于是临时将 Queue 资源和 Consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。")]),v._v(" "),_("li",[v._v("等快速消费完积压数据之后，"),_("strong",[v._v("得恢复原先部署的架构")]),v._v("，"),_("strong",[v._v("重新")]),v._v("用原先的 consumer 机器来消费消息。")])]),v._v(" "),_("h2",{attrs:{id:"mq-的高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的高可用"}},[v._v("#")]),v._v(" MQ 的高可用")]),v._v(" "),_("p",[v._v("不同 MQ 实现高可用的原理各不相同。因为 Kafka 比较具有代表性，所以这里以 Kafka 为例。")]),v._v(" "),_("h3",{attrs:{id:"kafka-的高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-的高可用"}},[v._v("#")]),v._v(" Kafka 的高可用")]),v._v(" "),_("h4",{attrs:{id:"kafka-的核心概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-的核心概念"}},[v._v("#")]),v._v(" Kafka 的核心概念")]),v._v(" "),_("p",[v._v("了解 Kafka，必须先了解 Kafka 的核心概念：")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("Broker")]),v._v(" - Kafka 集群包含一个或多个节点，这种节点被称为 Broker。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("Topic")]),v._v(" - 每条发布到 Kafka 集群的消息都有一个类别，这个类别被称为 Topic。（不同 Topic 的消息是物理隔离的；同一个 Topic 的消息保存在一个或多个 Broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）。对于每一个 Topic， Kafka 集群都会维持一个分区日志。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("Partition")]),v._v(" - 了提高 Kafka 的吞吐率，每个 Topic 包含一个或多个 Partition，每个 Partition 在物理上对应一个文件夹，该文件夹下存储这个 Partition 的所有消息和索引文件。")]),v._v(" "),_("ul",[_("li",[v._v("Kafka 日志的分区（Partition）分布在 Kafka 集群的节点上。每个节点在处理数据和请求时，共享这些分区。每一个分区都会在已配置的节点上进行备份，确保容错性。")])])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javaweb/distributed/mq/kafka/kafka-cluster-roles.png",alt:"img"}})]),v._v(" "),_("h4",{attrs:{id:"kafka-的副本机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-的副本机制"}},[v._v("#")]),v._v(" Kafka 的副本机制")]),v._v(" "),_("p",[v._v("Kafka 是如何实现高可用的呢？")]),v._v(" "),_("p",[v._v("Kafka 在 0.8 以前的版本中，如果一个 Broker 宕机了，其上面的 Partition 都不能用了，这自然不是高可用的。")]),v._v(" "),_("p",[v._v("为了实现高可用，Kafka 引入了复制功能。")]),v._v(" "),_("p",[v._v("简单来说，就是副本机制（ Replicate ）。")]),v._v(" "),_("p",[_("strong",[v._v("每个 Partition 都有一个 Leader，零个或多个 Follower")]),v._v("。Leader 和 Follower 都是 Broker，每个 Broker 都会成为某些分区的 Leader 和某些分区的 Follower，因此集群的负载是平衡的。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("Leader 处理一切对 Partition （分区）的读写请求")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("而 Follower 只需被动的同步 Leader 上的数据")]),v._v("。")])]),v._v(" "),_("p",[_("strong",[v._v("同一个 Topic 的不同 Partition 会分布在多个 Broker 上，而且一个 Partition 还会在其他的 Broker 上面进行备份")]),v._v("，Producer 在发布消息到某个 Partition 时，先找到该 Partition 的 Leader，然后向这个 Leader 推送消息；每个 Follower 都从 Leader 拉取消息，拉取消息成功之后，向 Leader 发送一个 ACK 确认。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/java/javaweb/distributed/mq/kafka/kafka-replication.png",alt:"img"}})]),v._v(" "),_("blockquote",[_("p",[v._v("FAQ")]),v._v(" "),_("p",[v._v("问：为什么让 Leader 处理一切对对 Partition （分区）的读写请求？")]),v._v(" "),_("p",[v._v("答：因为如果允许所有 Broker 都可以处理读写请求，就可能产生数据一致性问题。")])]),v._v(" "),_("h4",{attrs:{id:"kafka-选举-leader"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-选举-leader"}},[v._v("#")]),v._v(" Kafka 选举 Leader")]),v._v(" "),_("p",[v._v("由上文可知，Partition 在多个 Broker 上存在副本。")]),v._v(" "),_("p",[v._v("如果某个 Follower 宕机，啥事儿没有，正常工作。")]),v._v(" "),_("p",[v._v("如果 Leader 宕机了，会从 Follower 中"),_("strong",[v._v("重新选举")]),v._v("一个新的 Leader。")]),v._v(" "),_("h2",{attrs:{id:"主流-mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主流-mq"}},[v._v("#")]),v._v(" 主流 MQ")]),v._v(" "),_("h3",{attrs:{id:"activemq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#activemq"}},[v._v("#")]),v._v(" ActiveMQ")]),v._v(" "),_("p",[_("code",[v._v("ActiveMQ")]),v._v(" 是由 "),_("code",[v._v("Apache")]),v._v(" 出品，"),_("code",[v._v("ActiveMQ")]),v._v(" 是一个完全支持"),_("code",[v._v("JMS1.1")]),v._v(" 和 "),_("code",[v._v("J2EE 1.4")]),v._v(" 规范的 "),_("code",[v._v("JMS Provider")]),v._v(" 实现。它非常快速，支持 "),_("strong",[v._v("多种语言的客户端")]),v._v(" 和 "),_("strong",[v._v("协议")]),v._v("，而且可以非常容易的嵌入到企业的应用环境中，并有许多高级功能。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/8/16479c8ea7cdc2c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),v._v(" "),_("h4",{attrs:{id:"a-主要特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-主要特性"}},[v._v("#")]),v._v(" (a) 主要特性")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("服从 JMS 规范")]),v._v("："),_("code",[v._v("JMS")]),v._v(" 规范提供了良好的标准和保证，包括："),_("strong",[v._v("同步")]),v._v(" 或 "),_("strong",[v._v("异步")]),v._v(" 的消息分发，一次和仅一次的消息分发，"),_("strong",[v._v("消息接收")]),v._v(" 和 "),_("strong",[v._v("订阅")]),v._v(" 等等。遵从 "),_("code",[v._v("JMS")]),v._v(" 规范的好处在于，不论使用什么 "),_("code",[v._v("JMS")]),v._v(" 实现提供者，这些基础特性都是可用的；")]),v._v(" "),_("li",[_("strong",[v._v("连接灵活性")]),v._v("："),_("code",[v._v("ActiveMQ")]),v._v(" 提供了广泛的 "),_("strong",[v._v("连接协议")]),v._v("，支持的协议有："),_("code",[v._v("HTTP/S")]),v._v("，"),_("code",[v._v("IP")]),v._v(" "),_("strong",[v._v("多播")]),v._v("，"),_("code",[v._v("SSL")]),v._v("，"),_("code",[v._v("TCP")]),v._v("，"),_("code",[v._v("UDP")]),v._v(" 等等。对众多协议的支持让 "),_("code",[v._v("ActiveMQ")]),v._v(" 拥有了很好的灵活性；")]),v._v(" "),_("li",[_("strong",[v._v("支持的协议种类多")]),v._v("："),_("code",[v._v("OpenWire")]),v._v("、"),_("code",[v._v("STOMP")]),v._v("、"),_("code",[v._v("REST")]),v._v("、"),_("code",[v._v("XMPP")]),v._v("、"),_("code",[v._v("AMQP")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("持久化插件和安全插件")]),v._v("："),_("code",[v._v("ActiveMQ")]),v._v(" 提供了 "),_("strong",[v._v("多种持久化")]),v._v(" 选择。而且，"),_("code",[v._v("ActiveMQ")]),v._v(" 的安全性也可以完全依据用户需求进行 "),_("strong",[v._v("自定义鉴权")]),v._v(" 和 "),_("strong",[v._v("授权")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("支持的客户端语言种类多")]),v._v("：除了 "),_("code",[v._v("Java")]),v._v(" 之外，还有："),_("code",[v._v("C/C++")]),v._v("，"),_("code",[v._v(".NET")]),v._v("，"),_("code",[v._v("Perl")]),v._v("，"),_("code",[v._v("PHP")]),v._v("，"),_("code",[v._v("Python")]),v._v("，"),_("code",[v._v("Ruby")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("代理集群")]),v._v("：多个 "),_("code",[v._v("ActiveMQ")]),v._v(" "),_("strong",[v._v("代理")]),v._v(" 可以组成一个 "),_("strong",[v._v("集群")]),v._v(" 来提供服务；")]),v._v(" "),_("li",[_("strong",[v._v("异常简单的管理")]),v._v("："),_("code",[v._v("ActiveMQ")]),v._v(" 是以开发者思维被设计的。所以，它并不需要专门的管理员，因为它提供了简单又使用的管理特性。有很多中方法可以 "),_("strong",[v._v("监控")]),v._v(" "),_("code",[v._v("ActiveMQ")]),v._v(" 不同层面的数据，包括使用在 "),_("code",[v._v("JConsole")]),v._v(" 或者在 "),_("code",[v._v("ActiveMQ")]),v._v(" 的 "),_("code",[v._v("Web Console")]),v._v(" 中使用 "),_("code",[v._v("JMX")]),v._v("。通过处理 "),_("code",[v._v("JMX")]),v._v(" 的告警消息，通过使用 "),_("strong",[v._v("命令行脚本")]),v._v("，甚至可以通过监控各种类型的 "),_("strong",[v._v("日志")]),v._v("。")])]),v._v(" "),_("h4",{attrs:{id:"b-部署环境"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-部署环境"}},[v._v("#")]),v._v(" (b) 部署环境")]),v._v(" "),_("p",[_("code",[v._v("ActiveMQ")]),v._v(" 可以运行在 "),_("code",[v._v("Java")]),v._v(" 语言所支持的平台之上。使用 "),_("code",[v._v("ActiveMQ")]),v._v(" 需要：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Java JDK")])]),v._v(" "),_("li",[_("code",[v._v("ActiveMQ")]),v._v(" 安装包")])]),v._v(" "),_("h4",{attrs:{id:"c-优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-优点"}},[v._v("#")]),v._v(" (c) 优点")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("跨平台")]),v._v(" ("),_("code",[v._v("JAVA")]),v._v(" 编写与平台无关，"),_("code",[v._v("ActiveMQ")]),v._v(" 几乎可以运行在任何的 "),_("code",[v._v("JVM")]),v._v(" 上)；")]),v._v(" "),_("li",[v._v("可以用 "),_("code",[v._v("JDBC")]),v._v("：可以将 "),_("strong",[v._v("数据持久化")]),v._v(" 到数据库。虽然使用 "),_("code",[v._v("JDBC")]),v._v(" 会降低 "),_("code",[v._v("ActiveMQ")]),v._v(" 的性能，但是数据库一直都是开发人员最熟悉的存储介质；")]),v._v(" "),_("li",[v._v("支持 "),_("code",[v._v("JMS")]),v._v(" 规范：支持 "),_("code",[v._v("JMS")]),v._v(" 规范提供的 "),_("strong",[v._v("统一接口")]),v._v(";")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("自动重连")]),v._v(" 和 "),_("strong",[v._v("错误重试机制")]),v._v("；")]),v._v(" "),_("li",[v._v("有安全机制：支持基于 "),_("code",[v._v("shiro")]),v._v("，"),_("code",[v._v("jaas")]),v._v(" 等多种 "),_("strong",[v._v("安全配置机制")]),v._v("，可以对 "),_("code",[v._v("Queue/Topic")]),v._v(" 进行 "),_("strong",[v._v("认证和授权")]),v._v("；")]),v._v(" "),_("li",[v._v("监控完善：拥有完善的 "),_("strong",[v._v("监控")]),v._v("，包括 "),_("code",[v._v("Web Console")]),v._v("，"),_("code",[v._v("JMX")]),v._v("，"),_("code",[v._v("Shell")]),v._v(" 命令行，"),_("code",[v._v("Jolokia")]),v._v(" 的 "),_("code",[v._v("RESTful API")]),v._v("；")]),v._v(" "),_("li",[v._v("界面友善：提供的 "),_("code",[v._v("Web Console")]),v._v(" 可以满足大部分情况，还有很多 "),_("strong",[v._v("第三方的组件")]),v._v(" 可以使用，比如 "),_("code",[v._v("hawtio")]),v._v("；")])]),v._v(" "),_("h4",{attrs:{id:"d-缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#d-缺点"}},[v._v("#")]),v._v(" (d) 缺点")]),v._v(" "),_("ol",[_("li",[v._v("社区活跃度不及 "),_("code",[v._v("RabbitMQ")]),v._v(" 高；")]),v._v(" "),_("li",[v._v("根据其他用户反馈，会出莫名其妙的问题，会 "),_("strong",[v._v("丢失消息")]),v._v("；")]),v._v(" "),_("li",[v._v("目前重心放到 "),_("code",[v._v("activemq 6.0")]),v._v(" 产品 "),_("code",[v._v("Apollo")]),v._v("，对 "),_("code",[v._v("5.x")]),v._v(" 的维护较少；")]),v._v(" "),_("li",[v._v("不适合用于 "),_("strong",[v._v("上千个队列")]),v._v(" 的应用场景；")])]),v._v(" "),_("h3",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[v._v("#")]),v._v(" RabbitMQ")]),v._v(" "),_("p",[_("code",[v._v("RabbitMQ")]),v._v(" 于 "),_("code",[v._v("2007")]),v._v(" 年发布，是一个在 "),_("code",[v._v("AMQP")]),v._v(" ("),_("strong",[v._v("高级消息队列协议")]),v._v(")基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/8/16479c8ece3b5d7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),v._v(" "),_("h4",{attrs:{id:"a-主要特性-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-主要特性-2"}},[v._v("#")]),v._v(" (a) 主要特性")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("可靠性")]),v._v("：提供了多种技术可以让你在 "),_("strong",[v._v("性能")]),v._v(" 和 "),_("strong",[v._v("可靠性")]),v._v(" 之间进行 "),_("strong",[v._v("权衡")]),v._v("。这些技术包括 "),_("strong",[v._v("持久性机制")]),v._v("、"),_("strong",[v._v("投递确认")]),v._v("、"),_("strong",[v._v("发布者证实")]),v._v(" 和 "),_("strong",[v._v("高可用性机制")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("灵活的路由")]),v._v("：消息在到达队列前是通过 "),_("strong",[v._v("交换机")]),v._v(" 进行 "),_("strong",[v._v("路由")]),v._v(" 的。"),_("code",[v._v("RabbitMQ")]),v._v(" 为典型的路由逻辑提供了 "),_("strong",[v._v("多种内置交换机")]),v._v(" 类型。如果你有更复杂的路由需求，可以将这些交换机组合起来使用，你甚至可以实现自己的交换机类型，并且当做 "),_("code",[v._v("RabbitMQ")]),v._v(" 的 "),_("strong",[v._v("插件")]),v._v(" 来使用；")]),v._v(" "),_("li",[_("strong",[v._v("消息集群")]),v._v("：在相同局域网中的多个 "),_("code",[v._v("RabbitMQ")]),v._v(" 服务器可以 "),_("strong",[v._v("聚合")]),v._v(" 在一起，作为一个独立的逻辑代理来使用；")]),v._v(" "),_("li",[_("strong",[v._v("队列高可用")]),v._v("：队列可以在集群中的机器上 "),_("strong",[v._v("进行镜像")]),v._v("，以确保在硬件问题下还保证 "),_("strong",[v._v("消息安全")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("支持多种协议")]),v._v("：支持 "),_("strong",[v._v("多种消息队列协议")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("支持多种语言")]),v._v("：用 "),_("code",[v._v("Erlang")]),v._v(" 语言编写，支持只要是你能想到的 "),_("strong",[v._v("所有编程语言")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("管理界面")]),v._v("： "),_("code",[v._v("RabbitMQ")]),v._v(" 有一个易用的 "),_("strong",[v._v("用户界面")]),v._v("，使得用户可以 "),_("strong",[v._v("监控")]),v._v(" 和 "),_("strong",[v._v("管理")]),v._v(" 消息 "),_("code",[v._v("Broker")]),v._v(" 的许多方面；")]),v._v(" "),_("li",[_("strong",[v._v("跟踪机制")]),v._v("：如果 "),_("strong",[v._v("消息异常")]),v._v("，"),_("code",[v._v("RabbitMQ")]),v._v(" 提供消息跟踪机制，使用者可以找出发生了什么；")]),v._v(" "),_("li",[_("strong",[v._v("插件机制")]),v._v("：提供了许多 "),_("strong",[v._v("插件")]),v._v("，来从多方面进行扩展，也可以编写自己的插件。")])]),v._v(" "),_("h4",{attrs:{id:"b-部署环境-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-部署环境-2"}},[v._v("#")]),v._v(" (b) 部署环境")]),v._v(" "),_("p",[_("code",[v._v("RabbitMQ")]),v._v(" 可以运行在 "),_("code",[v._v("Erlang")]),v._v(" 语言所支持的平台之上，包括 "),_("code",[v._v("Solaris")]),v._v("，"),_("code",[v._v("BSD")]),v._v("，"),_("code",[v._v("Linux")]),v._v("，"),_("code",[v._v("MacOSX")]),v._v("，"),_("code",[v._v("TRU64")]),v._v("，"),_("code",[v._v("Windows")]),v._v(" 等。使用 "),_("code",[v._v("RabbitMQ")]),v._v(" 需要：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("ErLang")]),v._v(" 语言包")]),v._v(" "),_("li",[_("code",[v._v("RabbitMQ")]),v._v(" 安装包")])]),v._v(" "),_("h4",{attrs:{id:"c-优点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-优点-2"}},[v._v("#")]),v._v(" (c) 优点")]),v._v(" "),_("ol",[_("li",[v._v("由于 "),_("code",[v._v("Erlang")]),v._v(" 语言的特性，消息队列性能较好，支持 "),_("strong",[v._v("高并发")]),v._v("；")]),v._v(" "),_("li",[v._v("健壮、稳定、易用、"),_("strong",[v._v("跨平台")]),v._v("、支持 "),_("strong",[v._v("多种语言")]),v._v("、文档齐全；")]),v._v(" "),_("li",[v._v("有消息 "),_("strong",[v._v("确认机制")]),v._v(" 和 "),_("strong",[v._v("持久化机制")]),v._v("，可靠性高；")]),v._v(" "),_("li",[v._v("高度可定制的 "),_("strong",[v._v("路由")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("管理界面")]),v._v(" 较丰富，在互联网公司也有较大规模的应用，社区活跃度高。")])]),v._v(" "),_("h4",{attrs:{id:"d-缺点-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#d-缺点-2"}},[v._v("#")]),v._v(" (d) 缺点")]),v._v(" "),_("ol",[_("li",[v._v("尽管结合 "),_("code",[v._v("Erlang")]),v._v(" 语言本身的并发优势，性能较好，但是不利于做 "),_("strong",[v._v("二次开发和维护")]),v._v("；")]),v._v(" "),_("li",[v._v("实现了 "),_("strong",[v._v("代理架构")]),v._v("，意味着消息在发送到客户端之前可以在 "),_("strong",[v._v("中央节点")]),v._v(" 上排队。此特性使得 "),_("code",[v._v("RabbitMQ")]),v._v(" 易于使用和部署，但是使得其 "),_("strong",[v._v("运行速度较慢")]),v._v("，因为中央节点 "),_("strong",[v._v("增加了延迟")]),v._v("，"),_("strong",[v._v("消息封装后")]),v._v(" 也比较大；")]),v._v(" "),_("li",[v._v("需要学习 "),_("strong",[v._v("比较复杂")]),v._v(" 的 "),_("strong",[v._v("接口和协议")]),v._v("，学习和维护成本较高。")])]),v._v(" "),_("h3",{attrs:{id:"rocketmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq"}},[v._v("#")]),v._v(" RocketMQ")]),v._v(" "),_("p",[_("code",[v._v("RocketMQ")]),v._v(" 出自 "),_("strong",[v._v("阿里")]),v._v(" 的开源产品，用 "),_("code",[v._v("Java")]),v._v(" 语言实现，在设计时参考了 "),_("code",[v._v("Kafka")]),v._v("，并做出了自己的一些改进，"),_("strong",[v._v("消息可靠性上")]),v._v(" 比 "),_("code",[v._v("Kafka")]),v._v(" 更好。"),_("code",[v._v("RocketMQ")]),v._v(" 在阿里内部 \b 被广泛应用在 "),_("strong",[v._v("订单")]),v._v("，"),_("strong",[v._v("交易")]),v._v("，"),_("strong",[v._v("充值")]),v._v("，"),_("strong",[v._v("流计算")]),v._v("，"),_("strong",[v._v("消息推送")]),v._v("，"),_("strong",[v._v("日志流式处理")]),v._v("，"),_("code",[v._v("binglog")]),v._v(" "),_("strong",[v._v("分发")]),v._v(" 等场景。")]),v._v(" "),_("h4",{attrs:{id:"a-主要特性-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-主要特性-3"}},[v._v("#")]),v._v(" (a) 主要特性")]),v._v(" "),_("p",[v._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),_("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"800",height:"600"}}),v._v(")")]),v._v(" "),_("ol",[_("li",[v._v("基于 "),_("strong",[v._v("队列模型")]),v._v("：具有 "),_("strong",[v._v("高性能")]),v._v("、"),_("strong",[v._v("高可靠")]),v._v("、"),_("strong",[v._v("高实时")]),v._v("、"),_("strong",[v._v("分布式")]),v._v(" 等特点；")]),v._v(" "),_("li",[_("code",[v._v("Producer")]),v._v("、"),_("code",[v._v("Consumer")]),v._v("、"),_("strong",[v._v("队列")]),v._v(" 都支持 "),_("strong",[v._v("分布式")]),v._v("；")]),v._v(" "),_("li",[_("code",[v._v("Producer")]),v._v(" 向一些队列轮流发送消息，"),_("strong",[v._v("队列集合")]),v._v(" 称为 "),_("code",[v._v("Topic")]),v._v("。"),_("code",[v._v("Consumer")]),v._v(" 如果做 "),_("strong",[v._v("广播消费")]),v._v("，则一个 "),_("code",[v._v("Consumer")]),v._v(" 实例消费这个 "),_("code",[v._v("Topic")]),v._v(" 对应的 "),_("strong",[v._v("所有队列")]),v._v("；如果做 "),_("strong",[v._v("集群消费")]),v._v("，则 "),_("strong",[v._v("多个")]),v._v(" "),_("code",[v._v("Consumer")]),v._v(" 实例 "),_("strong",[v._v("平均消费")]),v._v(" 这个 "),_("code",[v._v("Topic")]),v._v(" 对应的队列集合；")]),v._v(" "),_("li",[v._v("能够保证 "),_("strong",[v._v("严格的消息顺序")]),v._v("；")]),v._v(" "),_("li",[v._v("提供丰富的 "),_("strong",[v._v("消息拉取模式")]),v._v("；")]),v._v(" "),_("li",[v._v("高效的订阅者 "),_("strong",[v._v("水平扩展")]),v._v("能力；")]),v._v(" "),_("li",[_("strong",[v._v("实时")]),v._v(" 的 "),_("strong",[v._v("消息订阅机制")]),v._v("；")]),v._v(" "),_("li",[v._v("亿级 "),_("strong",[v._v("消息堆积")]),v._v(" 能力；")]),v._v(" "),_("li",[v._v("较少的外部依赖。")])]),v._v(" "),_("h4",{attrs:{id:"b-部署环境-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-部署环境-3"}},[v._v("#")]),v._v(" (b) 部署环境")]),v._v(" "),_("p",[_("code",[v._v("RocketMQ")]),v._v(" 可以运行在 "),_("code",[v._v("Java")]),v._v(" 语言所支持的平台之上。使用 "),_("code",[v._v("RocketMQ")]),v._v(" 需要：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Java JDK")])]),v._v(" "),_("li",[v._v("安装 "),_("code",[v._v("git")]),v._v("、"),_("code",[v._v("Maven")])]),v._v(" "),_("li",[_("code",[v._v("RocketMQ")]),v._v(" 安装包")])]),v._v(" "),_("h4",{attrs:{id:"c-优点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-优点-3"}},[v._v("#")]),v._v(" (c) 优点")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("单机")]),v._v(" 支持 "),_("code",[v._v("1")]),v._v(" 万以上 "),_("strong",[v._v("持久化队列")]),v._v("；")]),v._v(" "),_("li",[_("code",[v._v("RocketMQ")]),v._v(" 的所有消息都是 "),_("strong",[v._v("持久化的")]),v._v("，先写入系统 "),_("code",[v._v("PAGECACHE")]),v._v("，然后 "),_("strong",[v._v("刷盘")]),v._v("，可以保证 "),_("strong",[v._v("内存")]),v._v(" 与 "),_("strong",[v._v("磁盘")]),v._v(" 都有一份数据，而 "),_("strong",[v._v("访问")]),v._v(" 时，直接 "),_("strong",[v._v("从内存读取")]),v._v("。")]),v._v(" "),_("li",[v._v("模型简单，接口易用（"),_("code",[v._v("JMS")]),v._v(" 的接口很多场合并不太实用）；")]),v._v(" "),_("li",[_("strong",[v._v("性能非常好")]),v._v("，可以允许 "),_("strong",[v._v("大量堆积消息")]),v._v(" 在 "),_("code",[v._v("Broker")]),v._v(" 中；")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("多种消费模式")]),v._v("，包括 "),_("strong",[v._v("集群消费")]),v._v("、"),_("strong",[v._v("广播消费")]),v._v("等；")]),v._v(" "),_("li",[v._v("各个环节 "),_("strong",[v._v("分布式扩展设计")]),v._v("，支持 "),_("strong",[v._v("主从")]),v._v(" 和 "),_("strong",[v._v("高可用")]),v._v("；")]),v._v(" "),_("li",[v._v("开发度较活跃，版本更新很快。")])]),v._v(" "),_("h4",{attrs:{id:"d-缺点-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#d-缺点-3"}},[v._v("#")]),v._v(" (d) 缺点")]),v._v(" "),_("ol",[_("li",[v._v("支持的 "),_("strong",[v._v("客户端语言")]),v._v(" 不多，目前是 "),_("code",[v._v("Java")]),v._v(" 及 "),_("code",[v._v("C++")]),v._v("，其中 "),_("code",[v._v("C++")]),v._v(" 还不成熟；")]),v._v(" "),_("li",[_("code",[v._v("RocketMQ")]),v._v(" 社区关注度及成熟度也不及前两者；")]),v._v(" "),_("li",[v._v("没有 "),_("code",[v._v("Web")]),v._v(" 管理界面，提供了一个 "),_("code",[v._v("CLI")]),v._v(" (命令行界面) 管理工具带来 "),_("strong",[v._v("查询")]),v._v("、"),_("strong",[v._v("管理")]),v._v(" 和 "),_("strong",[v._v("诊断各种问题")]),v._v("；")]),v._v(" "),_("li",[v._v("没有在 "),_("code",[v._v("MQ")]),v._v(" 核心里实现 "),_("code",[v._v("JMS")]),v._v(" 等接口；")])]),v._v(" "),_("h3",{attrs:{id:"kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[v._v("#")]),v._v(" Kafka")]),v._v(" "),_("p",[_("code",[v._v("Apache Kafka")]),v._v(" 是一个 "),_("strong",[v._v("分布式消息发布订阅")]),v._v(" 系统。它最初由 "),_("code",[v._v("LinkedIn")]),v._v(" 公司基于独特的设计实现为一个 "),_("strong",[v._v("分布式的日志提交系统")]),v._v(" ("),_("code",[v._v("a distributed commit log")]),v._v(")，之后成为 "),_("code",[v._v("Apache")]),v._v(" 项目的一部分。"),_("code",[v._v("Kafka")]),v._v(" "),_("strong",[v._v("性能高效")]),v._v("、"),_("strong",[v._v("可扩展良好")]),v._v(" 并且 "),_("strong",[v._v("可持久化")]),v._v("。它的 "),_("strong",[v._v("分区特性")]),v._v("，"),_("strong",[v._v("可复制")]),v._v(" 和 "),_("strong",[v._v("可容错")]),v._v(" 都是其不错的特性。")]),v._v(" "),_("p",[v._v('![img](data:image/svg+xml;utf8,<?xml version="1.0"?>'),_("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"708",height:"364"}}),v._v(")")]),v._v(" "),_("h4",{attrs:{id:"a-主要特性-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#a-主要特性-4"}},[v._v("#")]),v._v(" (a) 主要特性")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("快速持久化")]),v._v("：可以在 "),_("code",[v._v("O(1)")]),v._v(" 的系统开销下进行 "),_("strong",[v._v("消息持久化")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("高吞吐")]),v._v("：在一台普通的服务器上既可以达到 "),_("code",[v._v("10W/s")]),v._v(" 的 "),_("strong",[v._v("吞吐速率")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("完全的分布式系统")]),v._v("："),_("code",[v._v("Broker")]),v._v("、"),_("code",[v._v("Producer")]),v._v(" 和 "),_("code",[v._v("Consumer")]),v._v(" 都原生自动支持 "),_("strong",[v._v("分布式")]),v._v("，自动实现 "),_("strong",[v._v("负载均衡")]),v._v("；")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("同步")]),v._v(" 和 "),_("strong",[v._v("异步")]),v._v(" 复制两种 "),_("strong",[v._v("高可用机制")]),v._v("；")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("数据批量发送")]),v._v(" 和 "),_("strong",[v._v("拉取")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("零拷贝技术(zero-copy)")]),v._v("：减少 "),_("code",[v._v("IO")]),v._v(" 操作步骤，提高 "),_("strong",[v._v("系统吞吐量")]),v._v("；")]),v._v(" "),_("li",[_("strong",[v._v("数据迁移")]),v._v("、"),_("strong",[v._v("扩容")]),v._v(" 对用户透明；")]),v._v(" "),_("li",[_("strong",[v._v("无需停机")]),v._v(" 即可扩展机器；")]),v._v(" "),_("li",[_("strong",[v._v("其他特性")]),v._v("：丰富的 "),_("strong",[v._v("消息拉取模型")]),v._v("、高效 "),_("strong",[v._v("订阅者水平扩展")]),v._v("、实时的 "),_("strong",[v._v("消息订阅")]),v._v("、亿级的 "),_("strong",[v._v("消息堆积能力")]),v._v("、定期删除机制；")])]),v._v(" "),_("h4",{attrs:{id:"b-部署环境-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#b-部署环境-4"}},[v._v("#")]),v._v(" (b) 部署环境")]),v._v(" "),_("p",[v._v("使用 "),_("code",[v._v("Kafka")]),v._v(" 需要：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("Java JDK")])]),v._v(" "),_("li",[_("code",[v._v("Kafka")]),v._v(" 安装包")])]),v._v(" "),_("h4",{attrs:{id:"c-优点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#c-优点-4"}},[v._v("#")]),v._v(" (c) 优点")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("客户端语言丰富")]),v._v("：支持 "),_("code",[v._v("Java")]),v._v("、"),_("code",[v._v(".Net")]),v._v("、"),_("code",[v._v("PHP")]),v._v("、"),_("code",[v._v("Ruby")]),v._v("、"),_("code",[v._v("Python")]),v._v("、"),_("code",[v._v("Go")]),v._v(" 等多种语言；")]),v._v(" "),_("li",[_("strong",[v._v("高性能")]),v._v("：单机写入 "),_("code",[v._v("TPS")]),v._v(" 约在 "),_("code",[v._v("100")]),v._v(" 万条/秒，消息大小 "),_("code",[v._v("10")]),v._v(" 个字节；")]),v._v(" "),_("li",[v._v("提供 "),_("strong",[v._v("完全分布式架构")]),v._v("，并有 "),_("code",[v._v("replica")]),v._v(" 机制，拥有较高的 "),_("strong",[v._v("可用性")]),v._v(" 和 "),_("strong",[v._v("可靠性")]),v._v("，理论上支持 "),_("strong",[v._v("消息无限堆积")]),v._v("；")]),v._v(" "),_("li",[v._v("支持批量操作；")]),v._v(" "),_("li",[_("strong",[v._v("消费者")]),v._v(" 采用 "),_("code",[v._v("Pull")]),v._v(" 方式获取消息。"),_("strong",[v._v("消息有序")]),v._v("，"),_("strong",[v._v("通过控制")]),v._v(" 能够保证所有消息被消费且仅被消费 "),_("strong",[v._v("一次")]),v._v("；")]),v._v(" "),_("li",[v._v("有优秀的第三方 "),_("code",[v._v("Kafka Web")]),v._v(" 管理界面 "),_("code",[v._v("Kafka-Manager")]),v._v("；")]),v._v(" "),_("li",[v._v("在 "),_("strong",[v._v("日志领域")]),v._v(" 比较成熟，被多家公司和多个开源项目使用。")])]),v._v(" "),_("h4",{attrs:{id:"d-缺点-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#d-缺点-4"}},[v._v("#")]),v._v(" (d) 缺点")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("Kafka")]),v._v(" 单机超过 "),_("code",[v._v("64")]),v._v(" 个 "),_("strong",[v._v("队列/分区")]),v._v(" 时，"),_("code",[v._v("Load")]),v._v(" 时会发生明显的飙高现象。"),_("strong",[v._v("队列")]),v._v(" 越多，"),_("strong",[v._v("负载")]),v._v(" 越高，发送消息 "),_("strong",[v._v("响应时间变长")]),v._v("；")]),v._v(" "),_("li",[v._v("使用 "),_("strong",[v._v("短轮询方式")]),v._v("，"),_("strong",[v._v("实时性")]),v._v(" 取决于 "),_("strong",[v._v("轮询间隔时间")]),v._v("；")]),v._v(" "),_("li",[v._v("消费失败 "),_("strong",[v._v("不支持重试")]),v._v("；")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("消息顺序")]),v._v("，但是 "),_("strong",[v._v("一台代理宕机")]),v._v(" 后，就会产生 "),_("strong",[v._v("消息乱序")]),v._v("；")]),v._v(" "),_("li",[v._v("社区更新较慢。")])]),v._v(" "),_("h3",{attrs:{id:"mq-的技术选型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq-的技术选型"}},[v._v("#")]),v._v(" MQ 的技术选型")]),v._v(" "),_("p",[v._v("MQ 的技术选型一般要考虑以下几点：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("是否开源")]),v._v("：这决定了能否商用，所以最为重要。")]),v._v(" "),_("li",[_("strong",[v._v("社区活跃度越高越好")]),v._v("：高社区活跃度，一般保证了低 Bug 率，因为大部分 Bug，已经有人遇到并解决了。")]),v._v(" "),_("li",[_("strong",[v._v("技术生态适配性")]),v._v("：客户端对各种编程语言的支持。比如：如果使用 MQ 的都是 Java 应用，那么 ActiveMQ、RabbitMQ、RocketMQ、Kafka 都可以。如果需要支持其他语言，那么 RMQ 比较合适，因为它支持的编程语言比较丰富。如果 MQ 是应用于大数据或流式计算，那么 Kafka 几乎是标配。如果是应用于在线业务系统，那么 Kafka 就不合适了，可以考虑 RabbitMQ、 RocketMQ 很合适。")]),v._v(" "),_("li",[_("strong",[v._v("高可用性")]),v._v("：应用于线上的准入标准。")]),v._v(" "),_("li",[_("strong",[v._v("性能")]),v._v("：具备足够好的性能，能满足绝大多数场景的性能要求。")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("特性")]),v._v(" "),_("th",[v._v("ActiveMQ")]),v._v(" "),_("th",[v._v("RabbitMQ")]),v._v(" "),_("th",[v._v("RocketMQ")]),v._v(" "),_("th",[v._v("Kafka")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("单机吞吐量")]),v._v(" "),_("td",[v._v("万级，比 RocketMQ、Kafka 低一个数量级")]),v._v(" "),_("td",[v._v("同 ActiveMQ")]),v._v(" "),_("td",[v._v("10 万级，支撑高吞吐")]),v._v(" "),_("td",[v._v("10 万级，高吞吐，一般配合大数据类的系统来进行流式计算、日志采集等场景")])]),v._v(" "),_("tr",[_("td",[v._v("topic 数量对吞吐量的影响")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td",[v._v("topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic")]),v._v(" "),_("td",[v._v("topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源")])]),v._v(" "),_("tr",[_("td",[v._v("时效性")]),v._v(" "),_("td",[v._v("ms 级")]),v._v(" "),_("td",[v._v("微秒级，这是 RabbitMQ 的一大特点，延迟最低")]),v._v(" "),_("td",[v._v("ms 级")]),v._v(" "),_("td",[v._v("延迟在 ms 级以内")])]),v._v(" "),_("tr",[_("td",[v._v("可用性")]),v._v(" "),_("td",[v._v("高，基于主从架构实现高可用")]),v._v(" "),_("td",[v._v("同 ActiveMQ")]),v._v(" "),_("td",[v._v("非常高，分布式架构")]),v._v(" "),_("td",[v._v("非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用")])]),v._v(" "),_("tr",[_("td",[v._v("消息可靠性")]),v._v(" "),_("td",[v._v("有较低的概率丢失数据")]),v._v(" "),_("td",[v._v("基本不丢")]),v._v(" "),_("td",[v._v("经过参数优化配置，可以做到 0 丢失")]),v._v(" "),_("td",[v._v("同 RocketMQ")])]),v._v(" "),_("tr",[_("td",[v._v("功能支持")]),v._v(" "),_("td",[v._v("MQ 领域的功能极其完备")]),v._v(" "),_("td",[v._v("基于 erlang 开发，并发能力很强，性能极好，延时很低")]),v._v(" "),_("td",[v._v("MQ 功能较为完善，还是分布式的，扩展性好")]),v._v(" "),_("td",[v._v("功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用")])])])]),v._v(" "),_("p",[v._v("综上，各种对比之后，有如下建议：")]),v._v(" "),_("ul",[_("li",[v._v("业务系统场景，建议使用 RocketMQ、RabbitMQ。如果所有应用都是 Java，优选 RocketMQ，因为 RocketMQ 本身就是 Java 开发的，所以最适配。如果业务中有多种编程语言的应用，建议选择 RabbitMQ。")]),v._v(" "),_("li",[v._v("大数据和流式计算领域，或是作为日志缓冲，强烈建议选择 Kafka，业界标准，久经考验。")])]),v._v(" "),_("h2",{attrs:{id:"jms"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jms"}},[v._v("#")]),v._v(" JMS")]),v._v(" "),_("p",[v._v("提到 MQ，就顺便提一下 JMS 。")]),v._v(" "),_("p",[_("strong",[v._v("JMS（JAVA Message Service，java 消息服务）API 是一个消息服务的标准/规范，允许应用程序组件基于 JavaEE 平台创建、发送、接收和读取消息")]),v._v("。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。")]),v._v(" "),_("p",[v._v("在 EJB 架构中，有消息 bean 可以无缝的与 JMS 消息服务集成。在 J2EE 架构模式中，有消息服务者模式，用于实现消息与应用直接的解耦。")]),v._v(" "),_("h3",{attrs:{id:"消息模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息模型"}},[v._v("#")]),v._v(" 消息模型")]),v._v(" "),_("p",[v._v("在 JMS 标准中，有两种消息模型：")]),v._v(" "),_("ul",[_("li",[v._v("P2P(Point to Point)")]),v._v(" "),_("li",[v._v("Pub/Sub(Publish/Subscribe)")])]),v._v(" "),_("h4",{attrs:{id:"p2p-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#p2p-模式"}},[v._v("#")]),v._v(" P2P 模式")]),v._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/3101171-2adc66e2367cd2c2.png"}})]),v._v("\nP2P 模式包含三个角色：MQ（Queue），发送者(Sender)，接收者(Receiver)。每个消息都被发送到一个特定的队列，接收者从队列中获取消息。队列保留着消息，直到他们被消费或超时。\n"),_("p",[v._v("P2P 的特点")]),v._v(" "),_("ul",[_("li",[v._v("每个消息只有一个消费者（Consumer）(即一旦被消费，消息就不再在 MQ 中)")]),v._v(" "),_("li",[v._v("发送者和接收者之间在时间上没有依赖性，也就是说当发送者发送了消息之后，不管接收者有没有正在运行，它不会影响到消息被发送到队列")]),v._v(" "),_("li",[v._v("接收者在成功接收消息之后需向队列应答成功")])]),v._v(" "),_("p",[v._v("如果希望发送的每个消息都会被成功处理的话，那么需要 P2P 模式。")]),v._v(" "),_("h4",{attrs:{id:"pub-sub-模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pub-sub-模式"}},[v._v("#")]),v._v(" Pub/sub 模式")]),v._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/3101171-12afe9581da889ea.png"}})]),v._v("\n包含三个角色主题（Topic），发布者（Publisher），订阅者（Subscriber） 。多个发布者将消息发送到 Topic,系统将这些消息传递给多个订阅者。\n"),_("p",[v._v("Pub/Sub 的特点")]),v._v(" "),_("ul",[_("li",[v._v("每个消息可以有多个消费者")]),v._v(" "),_("li",[v._v("发布者和订阅者之间有时间上的依赖性。针对某个主题（Topic）的订阅者，它必须创建一个订阅者之后，才能消费发布者的消息。")]),v._v(" "),_("li",[v._v("为了消费消息，订阅者必须保持运行的状态。")])]),v._v(" "),_("p",[v._v("为了缓和这样严格的时间相关性，JMS 允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活（运行），它也能接收到发布者的消息。")]),v._v(" "),_("p",[v._v("如果希望发送的消息可以不被做任何处理、或者只被一个消息者处理、或者可以被多个消费者处理的话，那么可以采用 Pub/Sub 模型。")]),v._v(" "),_("h3",{attrs:{id:"消息消费"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息消费"}},[v._v("#")]),v._v(" 消息消费")]),v._v(" "),_("p",[v._v("在 JMS 中，消息的产生和消费都是异步的。对于消费来说，JMS 的消息者可以通过两种方式来消费消息。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("同步")]),v._v(" - 订阅者或接收者通过 "),_("code",[v._v("receive")]),v._v(" 方法来接收消息，"),_("code",[v._v("receive")]),v._v(" 方法在接收到消息之前（或超时之前）将一直阻塞；")]),v._v(" "),_("li",[_("strong",[v._v("异步")]),v._v(" - 订阅者或接收者可以注册为一个消息监听器。当消息到达之后，系统自动调用监听器的 "),_("code",[v._v("onMessage")]),v._v(" 方法。")])]),v._v(" "),_("p",[_("code",[v._v("JNDI")]),v._v(" - Java 命名和目录接口,是一种标准的 Java 命名系统接口。可以在网络上查找和访问服务。通过指定一个资源名称，该名称对应于数据库或命名服务中的一个记录，同时返回资源连接建立所必须的信息。")]),v._v(" "),_("p",[v._v("JNDI 在 JMS 中起到查找和访问发送目标或消息来源的作用。")]),v._v(" "),_("h3",{attrs:{id:"jms-编程模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jms-编程模型"}},[v._v("#")]),v._v(" JMS 编程模型")]),v._v(" "),_("h4",{attrs:{id:"connectionfactory"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#connectionfactory"}},[v._v("#")]),v._v(" ConnectionFactory")]),v._v(" "),_("p",[v._v("创建 Connection 对象的工厂，针对两种不同的 jms 消息模型，分别有 QueueConnectionFactory 和 TopicConnectionFactory 两种。可以通过 JNDI 来查找 ConnectionFactory 对象。")]),v._v(" "),_("h4",{attrs:{id:"destination"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#destination"}},[v._v("#")]),v._v(" Destination")]),v._v(" "),_("p",[v._v("Destination 的意思是消息生产者的消息发送目标或者说消息消费者的消息来源。对于消息生产者来说，它的 Destination 是某个队列（Queue）或某个主题（Topic）;对于消息消费者来说，它的 Destination 也是某个队列或主题（即消息来源）。")]),v._v(" "),_("p",[v._v("所以，Destination 实际上就是两种类型的对象：Queue、Topic。可以通过 JNDI 来查找 Destination。")]),v._v(" "),_("h4",{attrs:{id:"connection"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#connection"}},[v._v("#")]),v._v(" Connection")]),v._v(" "),_("p",[v._v("Connection 表示在客户端和 JMS 系统之间建立的链接（对 TCP/IP socket 的包装）。Connection 可以产生一个或多个 Session。跟 ConnectionFactory 一样，Connection 也有两种类型：QueueConnection 和 TopicConnection。")]),v._v(" "),_("h4",{attrs:{id:"session"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[v._v("#")]),v._v(" Session")]),v._v(" "),_("p",[v._v("Session 是操作消息的接口。可以通过 session 创建生产者、消费者、消息等。Session 提供了事务的功能。当需要使用 session 发送/接收多个消息时，可以将这些发送/接收动作放到一个事务中。同样，也分 QueueSession 和 TopicSession。")]),v._v(" "),_("h4",{attrs:{id:"消息的生产者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息的生产者"}},[v._v("#")]),v._v(" 消息的生产者")]),v._v(" "),_("p",[v._v("消息生产者由 Session 创建，并用于将消息发送到 Destination。同样，消息生产者分两种类型：QueueSender 和 TopicPublisher。可以调用消息生产者的方法（send 或 publish 方法）发送消息。")]),v._v(" "),_("h4",{attrs:{id:"消息消费者"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息消费者"}},[v._v("#")]),v._v(" 消息消费者")]),v._v(" "),_("p",[v._v("消息消费者由 Session 创建，用于接收被发送到 Destination 的消息。两种类型：QueueReceiver 和 TopicSubscriber。可分别通过 session 的 createReceiver(Queue)或 createSubscriber(Topic)来创建。当然，也可以 session 的 creatDurableSubscriber 方法来创建持久化的订阅者。")]),v._v(" "),_("h4",{attrs:{id:"messagelistener"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#messagelistener"}},[v._v("#")]),v._v(" MessageListener")]),v._v(" "),_("p",[v._v("消息监听器。如果注册了消息监听器，一旦消息到达，将自动调用监听器的 onMessage 方法。EJB 中的 MDB（Message-Driven Bean）就是一种 MessageListener。")]),v._v(" "),_("h2",{attrs:{id:"参考资料"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[v._v("#")]),v._v(" 参考资料")]),v._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/itfly8/p/5155983.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("大型网站架构系列：分布式 MQ（一）"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/itfly8/p/5156155.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("大型网站架构系列：MQ（二）"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://www.jianshu.com/p/453c6e7ff81c",target:"_blank",rel:"noopener noreferrer"}},[v._v("分布式开放 MQ(RocketMQ)的原理与实践"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/entry/5a0abfb5f265da43062a4a91",target:"_blank",rel:"noopener noreferrer"}},[v._v("阿里 RocketMQ 优势对比"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://github.com/doocs/advanced-java/blob/master/docs/high-concurrency/mq-interview.md",target:"_blank",rel:"noopener noreferrer"}},[v._v("advanced-java 之 MQ"),_("OutboundLink")],1)]),v._v(" "),_("li",[_("a",{attrs:{href:"https://juejin.im/post/6844903635046924296",target:"_blank",rel:"noopener noreferrer"}},[v._v("浅谈消息队列及常见的消息中间件"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=a.exports}}]);